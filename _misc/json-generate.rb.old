#
# Side generate JSON for all content on site
# Taken and heavily modified from https://gist.github.com/egardner/b6bd5d785048ec2d0b2b
# 
# Ben C, Jan 2019
#

module Jekyll
  require 'net/http'

  class JSONPage < Page
    def initialize(site, base, dir, name, content)
      @site = site
      @base = base
      @dir  = dir
      @name = name

      self.data = {}
      self.content = content

      process(@name)
    end

    def read_yaml(*)
      # Do nothing
    end

    def render_with_liquid?
      false
    end
  end

  ########################################################################################
  
  class JSONPostGenerator < Generator
    safe true

    def generate(site)
      site.pages.each do |page|
        # Set the path to the JSON version of the page
        dest = site.config['destination']

        # Only work with our markdown content, not index pages and others
        unless page.name.end_with? ".md"
          next
        end

        # Munge the destination to .json
        path = page.destination(dest)
        path["#{dest}/"] = ''
        path['/index.html'] = '.json'

        # Convert the page to a hash
        output = page.to_liquid

        # Prepare the output for JSON conversion
        ['dir', 'layout', 'path'].each do |key|
          output.delete(key)
        end

        # Default field for content was 'content', this trips up Azure Search
        # So put generated HTML in content_html and source Markdown in content_md
        output['content_html'] = page.transform
        output['content_md'] = output.delete('content')

        # Queue up for generation
        site.pages << JSONPage.new(site, site.source, File.dirname(path), File.basename(path), output.to_json)
      end
    end
  end
end